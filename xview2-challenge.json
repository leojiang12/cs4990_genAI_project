{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5"
   },
   "outputs": [],
   "source": [
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "import json\n",
    "from random import randint\n",
    "from collections import Counter\n",
    "from collections import defaultdict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "_kg_hide-output": true
   },
   "outputs": [],
   "source": [
    "import json \n",
    "from PIL import Image, ImageDraw\n",
    "from IPython.display import display\n",
    "from shapely import wkt\n",
    "from shapely.geometry.multipolygon import MultiPolygon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "from matplotlib import rcParams\n",
    "from copy import copy \n",
    "\n",
    "%matplotlib inline\n",
    "# figure size in inches optional\n",
    "rcParams['figure.figsize'] = 30, 30\n",
    "plt.rcParams['legend.title_fontsize'] = 14"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# CODE FOR THIS CELL IS TAKEN FROM https://www.kaggle.com/alexisbcook/interactive-maps\n",
    "import folium\n",
    "from folium import Choropleth, Circle, Marker\n",
    "from folium.plugins import HeatMap, MarkerCluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# CODE FOR THIS CELL IS TAKEN FROM https://www.kaggle.com/alexisbcook/interactive-maps\n",
    "# Function for displaying the map\n",
    "def embed_map(m, file_name):\n",
    "    from IPython.display import IFrame\n",
    "    m.save(file_name)\n",
    "    return IFrame(file_name, width='100%', height='500px')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fetch all post disaster json files\n",
    "labels_generator = Path('../data/tier3/labels').rglob(pattern=f'*post_*.json')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Group json files by disaster\n",
    "def get_disaster_dict(labels_generator):    \n",
    "    disaster_dict = defaultdict(list)\n",
    "    for label in labels_generator:\n",
    "        disaster_type = label.name.split('_')[0]\n",
    "        disaster_dict[disaster_type].append(str(label))\n",
    "    return disaster_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "disaster_dict = get_disaster_dict(labels_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# List of Disasters present in the dataset\n",
    "disaster_dict.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Select a particular disaster\n",
    "disaster_labels = disaster_dict['joplin-tornado']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_label(label_path):\n",
    "    with open(label_path) as json_file:\n",
    "        image_json = json.load(json_file)\n",
    "        return image_json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Color codes for polygons\n",
    "damage_dict = {\n",
    "    \"no-damage\": (0, 255, 0, 50),\n",
    "    \"minor-damage\": (0, 0, 255, 50),\n",
    "    \"major-damage\": (255, 69, 0, 50),\n",
    "    \"destroyed\": (255, 0, 0, 50),\n",
    "    \"un-classified\": (255, 255, 255, 50)\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_damage_type(properties):\n",
    "    if 'subtype' in properties:\n",
    "        return properties['subtype']\n",
    "    else:\n",
    "        return 'no-damage'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def annotate_img(draw, coords):\n",
    "        wkt_polygons = []\n",
    "\n",
    "        for coord in coords:\n",
    "            damage = get_damage_type(coord['properties'])\n",
    "            wkt_polygons.append((damage, coord['wkt']))\n",
    "\n",
    "        polygons = []\n",
    "\n",
    "        for damage, swkt in wkt_polygons:\n",
    "            polygons.append((damage, wkt.loads(swkt)))\n",
    "\n",
    "        for damage, polygon in polygons:\n",
    "            x,y = polygon.exterior.coords.xy\n",
    "            coords = list(zip(x,y))\n",
    "            draw.polygon(coords, damage_dict[damage])\n",
    "\n",
    "        del draw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def display_img(json_path, time='post', annotated=True):\n",
    "    if time=='pre':\n",
    "        json_path = json_path.replace('post', 'pre')\n",
    "        \n",
    "    img_path = json_path.replace('labels', 'images').replace('json','png')\n",
    "        \n",
    "    image_json = read_label(json_path)\n",
    "    img_name = image_json['metadata']['img_name']\n",
    "        \n",
    "    print(img_name)\n",
    "    \n",
    "    img = Image.open(img_path)\n",
    "    draw = ImageDraw.Draw(img, 'RGBA')\n",
    "    \n",
    "    if annotated:\n",
    "        annotate_img(draw, image_json['features']['xy'])\n",
    "\n",
    "    return img"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_image(label):\n",
    "\n",
    "    # read images\n",
    "    img_A = display_img(label, time='pre', annotated=False)\n",
    "    img_B = display_img(label, time='post', annotated=False)\n",
    "    img_C = display_img(label, time='pre', annotated=True)\n",
    "    img_D = display_img(label, time='post', annotated=True)\n",
    "\n",
    "\n",
    "    # display images\n",
    "    fig, ax = plt.subplots(2,2)\n",
    "    fig.set_size_inches(30, 30)\n",
    "    TITLE_FONT_SIZE = 24\n",
    "    ax[0][0].imshow(img_A);\n",
    "    ax[0][0].set_title('Pre Diaster Image (Not Annotated)', fontsize=TITLE_FONT_SIZE)\n",
    "    ax[0][1].imshow(img_B);\n",
    "    ax[0][1].set_title('Post Diaster Image (Not Annotated)', fontsize=TITLE_FONT_SIZE)\n",
    "    ax[1][0].imshow(img_C);\n",
    "    ax[1][0].set_title('Pre Diaster Image (Annotated)', fontsize=TITLE_FONT_SIZE)\n",
    "    ax[1][1].imshow(img_D);\n",
    "    ax[1][1].set_title('Post Diaster Image (Annotated)', fontsize=TITLE_FONT_SIZE)\n",
    "    plt.savefig('split_image.png', dpi = 100)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "disaster_labels[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Display a single image using label path. \n",
    "# `time` argument shows post or pre disaster images\n",
    "# `annotated` argument labels images\n",
    "display_img(disaster_labels[0], time='post', annotated=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get polygons center coords (lat, long)\n",
    "def get_centroid(coords):\n",
    "    polygons = [ wkt.loads(polygon['wkt']) for polygon in coords ]\n",
    "    centroid =  MultiPolygon(polygons).centroid\n",
    "    try:\n",
    "        return {'centroid_x': centroid.x, 'centroid_y': centroid.y, 'latlong': centroid }\n",
    "    except IndexError as e:\n",
    "        return {'centroid_x': None, 'centroid_y': None, 'latlong': None }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_damage_dict(coords):\n",
    "    damage_list = [ get_damage_type(coord['properties']) for coord in coords]\n",
    "    return Counter(damage_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add centroid and damage dict to metadata\n",
    "def metadata_with_damage(label_path):\n",
    "    data = read_label(label_path)\n",
    "    coords = data['features']['lng_lat']\n",
    "    \n",
    "    damage_dict = get_damage_dict(coords)\n",
    "    centroid = get_centroid(coords)\n",
    "    \n",
    "    data['metadata'].update(centroid)\n",
    "    data['metadata']['path'] = label_path\n",
    "    data['metadata'].update(damage_dict)\n",
    "    return data['metadata']\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_metadata_df(disaster_labels):\n",
    "    metadata_list = [metadata_with_damage(label_path) for label_path in disaster_labels]\n",
    "    df = pd.DataFrame(metadata_list)\n",
    "    return df.fillna(df.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sort df by destroyed count\n",
    "df = generate_metadata_df(disaster_labels)\n",
    "sorted_df = df.sort_values(by=['destroyed'], ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sorted_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_generator = sorted_df.iterrows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate Google Maps link to location\n",
    "from IPython.core.display import display, HTML\n",
    "def generate_gmaps_link(lat, long):\n",
    "    link = f\"https://www.google.com/maps/@?api=1&map_action=map&center={lat},{long}&zoom=18&basemap=satellite\"\n",
    "    return HTML(f\"\"\"<a href=\"{link}\" target=\"_blank\">{link}</a>\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# fetch first row (most damaged location)\n",
    "index, row = next(df_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# provides google maps link\n",
    "generate_gmaps_link(row.centroid_y, row.centroid_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Shows damage polygon counts for image\n",
    "row[['no-damage', 'minor-damage', 'major-damage', 'destroyed', 'un-classified']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# shows pre disaster image\n",
    "display_img(row.path, time='pre', annotated=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# shows post disaster image\n",
    "display_img(row.path, time='post', annotated=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# plots pre and post disaster images with annotations\n",
    "plot_image(row.path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Damaged Locations on Map**\n",
    "\n",
    "This Map displays the affected locations by their damage type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_circle(row):\n",
    "    \n",
    "    COLOR_MAP = {\n",
    "        \"no-damage\": 'green',\n",
    "        \"minor-damage\": 'blue',\n",
    "        \"major-damage\": '#ffff00',\n",
    "        \"destroyed\": 'red',\n",
    "        \"un-classified\": 'black'\n",
    "    }\n",
    "    \n",
    "    for damage_type, color in COLOR_MAP.items():\n",
    "        yield Circle(\n",
    "            location=row.loc[['centroid_y','centroid_x']].tolist(),\n",
    "            radius=row.loc[damage_type],\n",
    "            color=color)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "location = df.mean().loc[['centroid_y','centroid_x']].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# CODE FOR THIS CELL IS TAKEN FROM https://www.kaggle.com/alexisbcook/interactive-maps\n",
    "\n",
    "# mean latitude and longitude\n",
    "# Create a map\n",
    "m_2 = folium.Map(location=location, tiles='openstreetmap', zoom_start=13)\n",
    "\n",
    "# Add points to the map\n",
    "for idx, row in df.iterrows():\n",
    "    generator = generate_circle(row)\n",
    "    for circle in generator:\n",
    "        circle.add_to(m_2)\n",
    "\n",
    "# Display the map\n",
    "embed_map(m_2, 'm_2.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "labels_generator = Path('../input').rglob(pattern=f'*.json')\n",
    "full_df = generate_metadata_df(labels_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot bargraph based on an agg_func\n",
    "def plot_bargraph(df, x, y, agg_func):\n",
    "  new_df = df.groupby('disaster', as_index=False).agg(agg_func)\n",
    "\n",
    "  for index, row in new_df.iterrows():\n",
    "    plt.bar(row.disaster, row.gsd, label=row.disaster, align='center')\n",
    "    \n",
    "#   plt.legend(loc=1,prop={'size':18})\n",
    "\n",
    "  plt.xticks(fontsize=22, rotation=90)\n",
    "  fig = plt.gcf()\n",
    "  fig.set_size_inches(30, 30)\n",
    "  plt.savefig(f'{agg_func}.png', dpi=100)\n",
    "  plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Mean GSD by grouped by Disater**\n",
    "\n",
    "The Ground Sampling Distance will help us get an idea on the spatial resolution of the images per disaster. This has help us normalize the images to a specific resolution during training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_bargraph(full_df, x='disaster', y='gsd', agg_func='mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Mean GSD for dataset\n",
    "full_df['gsd'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Number of images per Disaster**\n",
    "\n",
    "The number of datapoints per dataset will give us an idea on which disaster to focus on while training our model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_bargraph(full_df, x='disaster', y='gsd', agg_func='count')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "xbd_scratch",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.22"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
